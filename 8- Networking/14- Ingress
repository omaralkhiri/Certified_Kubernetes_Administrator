# **Kubernetes Ingress: A Comprehensive Guide**

## **1. Introduction to Ingress in Kubernetes**
When deploying applications in Kubernetes, exposing services to external users requires careful consideration of routing, load balancing, and security. Kubernetes **Ingress** provides a powerful way to manage external access to services in a cluster, typically via HTTP/HTTPS. It offers features like:
- **URL-based routing** (e.g., `/watch`, `/wear`)
- **Host-based routing** (e.g., `wear.myonlinestore.com`, `watch.myonlinestore.com`)
- **SSL/TLS termination**
- **Load balancing**

Without Ingress, administrators often rely on **NodePort** or **LoadBalancer** services, which can be inefficient and costly in large-scale deployments.

---

## **2. The Problem: External Access Without Ingress**
### **2.1 Basic Setup (NodePort)**
1. **Deploy an application** (e.g., an online store) as a pod.
2. **Expose it via a NodePort service** (e.g., port `38080`).
   - Users access the app via `http://<Node_IP>:38080`.
3. **DNS configuration** maps `myonlinestore.com` to the node IP.
4. **Proxy server** redirects port `80` to `38080` (to avoid exposing high ports).

**Issues:**
- Users must remember port numbers.
- No path-based routing (e.g., `/watch`).
- No SSL termination.

### **2.2 Cloud Load Balancer (Type: LoadBalancer)**
1. Instead of `NodePort`, use `LoadBalancer` service.
   - Kubernetes provisions a cloud load balancer (e.g., GCP Network LB).
   - Users access via `http://myonlinestore.com` (DNS points to LB IP).

**Issues:**
- **Costly**: Each new service requires a new LB.
- **No URL-based routing**: Cannot route `/watch` and `/wear` to different services.
- **SSL configuration** must be managed per service.

---

## **3. Solution: Kubernetes Ingress**
Ingress acts as a **Layer 7 (HTTP/HTTPS) load balancer** inside Kubernetes, providing:
- **Single entry point** for multiple services.
- **Path-based** and **host-based routing**.
- **Centralized SSL/TLS termination**.

### **3.1 How Ingress Works**
1. **Ingress Controller**: A reverse proxy (e.g., Nginx, HAProxy, Traefik) deployed in the cluster.
2. **Ingress Resource**: Rules defined in Kubernetes to route traffic.

#### **3.1.1 Ingress Controller**
- Monitors Kubernetes for new Ingress rules.
- Dynamically updates routing configurations.
- Must be deployed separately (not included by default).

#### **3.1.2 Ingress Resource**
- Defines routing rules (e.g., `/wear` ‚Üí `wear-service`, `/watch` ‚Üí `video-service`).
- Supports:
  - **Single backend** (all traffic to one service).
  - **Path-based routing** (e.g., `/wear`, `/watch`).
  - **Host-based routing** (e.g., `wear.myonlinestore.com`).

---

## **4. Deploying an Ingress Controller**
### **4.1 Example: Nginx Ingress Controller**
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-ingress
  template:
    metadata:
      labels:
        app: nginx-ingress
    spec:
      serviceAccountName: nginx-ingress-serviceaccount
      containers:
        - name: nginx-ingress
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:latest
          args:
            - /nginx-ingress-controller
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - containerPort: 80
            - containerPort: 443
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-ingress-service
spec:
  type: NodePort
  selector:
    app: nginx-ingress
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30080
    - port: 443
      targetPort: 443
      nodePort: 30443
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configuration
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
```

### **4.2 Key Components**
1. **Deployment**: Runs the Nginx Ingress Controller.
2. **Service (NodePort)**: Exposes the controller externally.
3. **ConfigMap**: Stores Nginx configurations.
4. **ServiceAccount**: Grants permissions to watch Ingress resources.

---

## **5. Configuring Ingress Resources**
### **5.1 Single Backend (All Traffic to One Service)**
```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: simple-ingress
spec:
  defaultBackend:
    service:
      name: wear-service
      port:
        number: 80
```

### **5.2 Path-Based Routing**
```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: path-based-ingress
spec:
  rules:
  - http:
      paths:
      - path: /wear
        pathType: Prefix
        backend:
          service:
            name: wear-service
            port:
              number: 80
      - path: /watch
        pathType: Prefix
        backend:
          service:
            name: video-service
            port:
              number: 80
```

### **5.3 Host-Based Routing**
```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: host-based-ingress
spec:
  rules:
  - host: wear.myonlinestore.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: wear-service
            port:
              number: 80
  - host: watch.myonlinestore.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: video-service
            port:
              number: 80
```

### **5.4 Default Backend (404 Handling)**
```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: default-backend-ingress
spec:
  defaultBackend:
    service:
      name: default-http-backend
      port:
        number: 80
```

---

## **6. SSL/TLS Termination**
To enable HTTPS:
1. **Create a TLS secret**:
   ```sh
   kubectl create secret tls myonlinestore-tls --cert=path/to/cert.crt --key=path/to/key.key
   ```
2. **Configure Ingress**:
   ```yaml
   apiVersion: networking.k8s.io/v1
   kind: Ingress
   metadata:
     name: tls-ingress
   spec:
     tls:
     - hosts:
       - myonlinestore.com
       secretName: myonlinestore-tls
     rules:
     - host: myonlinestore.com
       http:
         paths:
         - path: /
           backend:
             service:
               name: wear-service
               port:
                 number: 80
   ```

---

## **7. Summary**
| Feature               | Without Ingress | With Ingress |
|-----------------------|----------------|--------------|
| **Single Entry Point** | ‚ùå (Multiple LBs) | ‚úÖ |
| **Path-Based Routing** | ‚ùå (Manual proxy) | ‚úÖ |
| **Host-Based Routing** | ‚ùå (Separate DNS/LB) | ‚úÖ |
| **SSL Termination**    | Per-service | Centralized |
| **Cost Efficiency**    | High (Multiple LBs) | Low (Single LB) |

### **Benefits of Ingress**
‚úî **Simplified routing** (path/host-based).  
‚úî **Centralized SSL/TLS**.  
‚úî **Reduced cloud costs** (fewer LBs).  
‚úî **Dynamic configuration** (no manual proxy updates).  

### **When to Use Ingress?**
- Multiple services needing HTTP/HTTPS routing.
- Need for SSL termination.
- Avoiding cloud load balancer costs.

---

## **8. Conclusion**
Kubernetes **Ingress** provides a scalable, cost-effective way to manage external access to services. By deploying an **Ingress Controller** (e.g., Nginx) and defining **Ingress Resources**, administrators can:
- Route traffic based on URLs/hostnames.
- Terminate SSL centrally.
- Reduce reliance on expensive cloud load balancers.

For production-grade applications, **Ingress is the recommended approach** for managing external traffic in Kubernetes. üöÄ