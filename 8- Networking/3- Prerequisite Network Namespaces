# **Linux Network Namespaces: A Comprehensive Guide**

## **1. Introduction to Network Namespaces**
Network namespaces in Linux provide a way to isolate network stacks, allowing processes within a namespace to have their own virtual network interfaces, routing tables, and ARP tables. This isolation is crucial for containerization technologies like Docker, where each container must operate as if it has its own independent network.

### **1.1 Analogy: Namespaces as Rooms in a House**
Think of a **host machine** as a **house**, and **namespaces** as **rooms** assigned to different children (containers).  
- Each child (container) sees only their own room (namespace) and believes they are the sole occupant.  
- The parent (host) can see all rooms (namespaces) and control connectivity between them.  

This isolation ensures that processes inside a namespace cannot see or interfere with processes outside it.

---

## **2. Creating and Managing Network Namespaces**
### **2.1 Creating a Network Namespace**
To create a new network namespace:
```bash
ip netns add <namespace_name>
```
**Example:**
```bash
ip netns add red
ip netns add blue
```

### **2.2 Listing Network Namespaces**
To list all existing network namespaces:
```bash
ip netns list
```

### **2.3 Executing Commands Inside a Namespace**
To run a command inside a namespace:
```bash
ip netns exec <namespace> <command>
```
**Example (Viewing interfaces inside `red` namespace):**
```bash
ip netns exec red ip link
```
**Alternative (using `-n` flag for `ip` commands):**
```bash
ip -n red link
```

### **2.4 Viewing Network Configurations Inside a Namespace**
- **Interfaces:** `ip link` (inside namespace shows only loopback by default).  
- **ARP Table:** `arp -n` (initially empty).  
- **Routing Table:** `ip route` (no routes by default).  

---

## **3. Connecting Two Network Namespaces**
To establish connectivity between two namespaces, we use a **virtual Ethernet (veth) pair**, which acts like a virtual cable.

### **3.1 Creating a veth Pair**
```bash
ip link add veth-red type veth peer name veth-blue
```

### **3.2 Attaching Interfaces to Namespaces**
```bash
ip link set veth-red netns red
ip link set veth-blue netns blue
```

### **3.3 Assigning IP Addresses**
```bash
ip -n red addr add 192.168.15.1/24 dev veth-red
ip -n blue addr add 192.168.15.2/24 dev veth-blue
```

### **3.4 Bringing Interfaces Up**
```bash
ip -n red link set veth-red up
ip -n blue link set veth-blue up
```

### **3.5 Testing Connectivity**
```bash
ip netns exec red ping 192.168.15.2
```
- **ARP Tables** (`arp -n`) will now show neighbor MAC addresses.

---

## **4. Connecting Multiple Namespaces Using a Virtual Switch**
For multiple namespaces, a **virtual switch (Linux Bridge)** is used instead of direct veth pairs.

### **4.1 Creating a Linux Bridge**
```bash
ip link add vnet0 type bridge
ip link set vnet0 up
```

### **4.2 Connecting Namespaces to the Bridge**
1. **Create veth pairs:**
   ```bash
   ip link add veth-red type veth peer name veth-red-br
   ip link add veth-blue type veth peer name veth-blue-br
   ```
2. **Attach one end to the namespace:**
   ```bash
   ip link set veth-red netns red
   ip link set veth-blue netns blue
   ```
3. **Attach the other end to the bridge:**
   ```bash
   ip link set veth-red-br master vnet0
   ip link set veth-blue-br master vnet0
   ```
4. **Assign IPs and bring interfaces up:**
   ```bash
   ip -n red addr add 192.168.15.1/24 dev veth-red
   ip -n blue addr add 192.168.15.2/24 dev veth-blue
   ip -n red link set veth-red up
   ip -n blue link set veth-blue up
   ```

### **4.3 Testing Inter-Namespace Communication**
```bash
ip netns exec red ping 192.168.15.2
```

---

## **5. Connecting Namespaces to the Host and External Network**
### **5.1 Assigning an IP to the Bridge (Host Access)**
```bash
ip addr add 192.168.15.5/24 dev vnet0
```
Now, the host can ping namespaces:
```bash
ping 192.168.15.1
```

### **5.2 Enping External Network Access (NAT)**
Namespaces need a **default gateway** (the host) and **NAT** to reach external networks.

#### **5.2.1 Adding a Default Route in Namespaces**
```bash
ip netns exec red ip route add default via 192.168.15.5
```

#### **5.2.2 Enabling NAT on the Host**
```bash
iptables -t nat -A POSTROUTING -s 192.168.15.0/24 -j MASQUERADE
```

#### **5.2.3 Allowing Forwarding**
```bash
echo 1 > /proc/sys/net/ipv4/ip_forward
```
Now, namespaces can reach the internet:
```bash
ip netns exec red ping 8.8.8.8
```

---

## **6. Exposing Services Inside Namespaces to the Outside World**
To allow external access to a service (e.g., a web server on port 80 in `blue` namespace):

### **6.1 Port Forwarding with iptables**
```bash
iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination 192.168.15.2:80
iptables -A FORWARD -p tcp -d 192.168.15.2 --dport 80 -j ACCEPT
```
Now, accessing `host-ip:80` will forward traffic to the namespace.

---

## **7. Conclusion**
- **Network namespaces** provide isolated network environments.  
- **veth pairs** connect two namespaces directly.  
- **Linux Bridge** acts as a virtual switch for multiple namespaces.  
- **NAT and routing** enable external connectivity.  
- **Port forwarding** exposes internal services externally.  

This setup is fundamental for container networking (Docker, Kubernetes) and virtualized environments.

---

### **Additional Commands for Debugging**
| Command | Description |
|---------|-------------|
| `ip netns list` | List all network namespaces |
| `ip -n <ns> link` | List interfaces in a namespace |
| `ip -n <ns> route` | View routing table in a namespace |
| `iptables -t nat -L` | List NAT rules |
| `bridge link` | Show bridge-connected interfaces |

This documentation provides a complete guide to Linux network namespaces, from basic isolation to full external connectivity. ðŸš€