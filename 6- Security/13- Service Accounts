# Kubernetes Service Accounts Documentation

## Introduction

In Kubernetes, service accounts are used to provide an identity for processes running in pods. This identity is essential for interacting with the Kubernetes API. While user accounts are intended for human users, service accounts are designed for machine or application use. This documentation will guide you through the creation, management, and usage of service accounts in Kubernetes.

## Types of Accounts in Kubernetes

There are two types of accounts in Kubernetes:

1. **User Accounts**: These are used by humans, such as administrators or developers, to access and manage the Kubernetes cluster.
2. **Service Accounts**: These are used by applications or processes running within the cluster to interact with the Kubernetes API.

## Creating a Service Account

To create a service account, use the following command:

```bash
kubectl create serviceaccount <service-account-name>
```

For example, to create a service account named `dashboard-sa`, run:

```bash
kubectl create serviceaccount dashboard-sa
```

You can view the list of service accounts using:

```bash
kubectl get serviceaccount
```

## Service Account Tokens

When a service account is created, a token is automatically generated. This token is stored as a **Secret** object. The token is used by external applications to authenticate with the Kubernetes API.

To view the token, describe the secret associated with the service account:

```bash
kubectl describe secret <secret-name>
```

For example, if the secret is named `dashboard-sa-token-kbpdm`, you can view it with:

```bash
kubectl describe secret dashboard-sa-token-kbpdm
```

The token can be used as a bearer token in REST API calls to the Kubernetes API. For example, using `curl`:

```bash
curl -X GET https://<kubernetes-api-server> --header "Authorization: Bearer <token>"
```

## Using Service Accounts in Pods

If your application is running within the Kubernetes cluster, you can simplify the authentication process by automatically mounting the service account token as a volume inside the pod. This eliminates the need to manually configure the token.

### Default Service Account

Kubernetes automatically creates a **default** service account in each namespace. When a pod is created without specifying a service account, the default service account and its token are automatically mounted into the pod.

For example, consider a pod definition file for a custom Kubernetes dashboard application:

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-dashboard
spec:
  containers:
  - name: dashboard-container
    image: my-kubernetes-dashboard
```

When this pod is created, the default service account token is mounted at the following location inside the pod:

```
/var/run/secrets/kubernetes.io/serviceaccount
```

You can list the contents of this directory from within the pod:

```bash
ls /var/run/secrets/kubernetes.io/serviceaccount
```

The token is stored in a file named `token`. You can view the token with:

```bash
cat /var/run/secrets/kubernetes.io/serviceaccount/token
```

### Using a Custom Service Account

To use a custom service account, modify the pod definition file to include the `serviceAccountName` field:

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-dashboard
spec:
  serviceAccountName: dashboard-sa
  containers:
  - name: dashboard-container
    image: my-kubernetes-dashboard
```

After applying this change, the pod will use the specified service account. Note that you cannot change the service account of an existing pod; you must delete and recreate the pod. However, in the case of a **Deployment**, you can update the service account, and the Deployment will automatically roll out new pods with the updated service account.

### Disabling Automatic Token Mounting

If you do not want Kubernetes to automatically mount the default service account token, you can disable this behavior by setting the `automountServiceAccountToken` field to `false` in the pod specification:

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-dashboard
spec:
  automountServiceAccountToken: false
  containers:
  - name: dashboard-container
    image: my-kubernetes-dashboard
```

## Conclusion

Service accounts are a crucial part of Kubernetes security, allowing applications to authenticate and interact with the Kubernetes API. By understanding how to create, manage, and use service accounts, you can ensure that your applications have the necessary permissions to function correctly within the cluster.

For more advanced security concepts, such as authentication, authorization, and role-based access control (RBAC), refer to the Kubernetes Administrator course documentation.