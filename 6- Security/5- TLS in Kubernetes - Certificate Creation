# Kubernetes Cluster Certificate Generation

## Overview
This document provides step-by-step instructions on generating certificates for a Kubernetes cluster using OpenSSL. Several tools can be used for this process, such as EasyRSA, OpenSSL, and CFSSL. In this guide, we will use OpenSSL to generate the necessary certificates.

## Generating CA Certificates
### 1. Create a Private Key for the CA
```sh
openssl genrsa -out ca.key 2048
```

### 2. Generate a Certificate Signing Request (CSR)
```sh
openssl req -new -key ca.key -out ca.csr -subj "/CN=Kubernetes-CA"
```

### 3. Sign the Certificate Request to Create the Root Certificate
```sh
openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt -days 1000
```
This certificate is self-signed as it belongs to the CA itself. It will be used to sign all other certificates.

## Generating Client Certificates

### 1. Create an Admin User Certificate
#### Generate Private Key:
```sh
openssl genrsa -out admin.key 2048
```
#### Generate a CSR:
```sh
openssl req -new -key admin.key -out admin.csr -subj "/CN=kube-admin/O=system:masters"
```
#### Generate and Sign the Certificate:
```sh
openssl x509 -req -in admin.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out admin.crt -days 1000
```
The `system:masters` group grants the admin user cluster-wide administrative privileges.

### 2. Generate Certificates for Kubernetes Components
We follow the same procedure to generate client certificates for:
- Kube Scheduler (Prefixed with `system:`)
- Kube Controller Manager (Prefixed with `system:`)
- Kube Proxy (Prefixed with `system:`)

## Generating Server-Side Certificates

### 1. Generating Certificates for etcd Server
#### Generate Private Key:
```sh
openssl genrsa -out etcd-server.key 2048
```
#### Generate CSR:
```sh
openssl req -new -key etcd-server.key -out etcd-server.csr -subj "/CN=etcd-server"
```
#### Sign the Certificate:
```sh
openssl x509 -req -in etcd-server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out etcd-server.crt -days 1000
```

### 2. Generating API Server Certificates
The Kubernetes API server is accessed using different names, such as:
- `kubernetes`
- `kubernetes.default`
- `kubernetes.default.svc`
- `kubernetes.default.svc.cluster.local`
- IP address of the Kubernetes API Server

To include these alternate names, create an OpenSSL configuration file `openssl.cnf`:
```ini
[req]
distinguished_name=req_distinguished_name
x509_extensions=v3_req
prompt=no

[req_distinguished_name]
CN=Kubernetes API Server

[v3_req]
subjectAltName = @alt_names

[alt_names]
DNS.1 = kubernetes
DNS.2 = kubernetes.default
DNS.3 = kubernetes.default.svc
DNS.4 = kubernetes.default.svc.cluster.local
IP.1 = <API_SERVER_IP>
```
Then, generate the certificate:
```sh
openssl genrsa -out kube-apiserver.key 2048
openssl req -new -key kube-apiserver.key -out kube-apiserver.csr -config openssl.cnf
openssl x509 -req -in kube-apiserver.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out kube-apiserver.crt -extensions v3_req -extfile openssl.cnf -days 1000
```

### 3. Generating Kubelet Server Certificates
Each node requires a key pair:
```sh
openssl genrsa -out node-01.key 2048
openssl req -new -key node-01.key -out node-01.csr -subj "/CN=system:node:node-01/O=system:nodes"
openssl x509 -req -in node-01.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out node-01.crt -days 1000
```
Repeat for all nodes in the cluster.

## Using Certificates
To authenticate using these certificates:
1. Use them directly in API calls:
   ```sh
   curl --cert admin.crt --key admin.key --cacert ca.crt https://<API_SERVER>:6443/api
   ```
2. Store them in `kubeconfig` for easy access:
   ```sh
   kubectl config set-cluster my-cluster --server=https://<API_SERVER>:6443 --certificate-authority=ca.crt
   kubectl config set-credentials kube-admin --client-certificate=admin.crt --client-key=admin.key
   kubectl config set-context kube-admin@my-cluster --cluster=my-cluster --user=kube-admin
   kubectl config use-context kube-admin@my-cluster
   ```

## Conclusion
This document covered:
- Generating CA certificates
- Creating client and server certificates
- Using certificates to authenticate with the Kubernetes API
- Setting up certificates for etcd, API Server, and kubelets

In the next section, we will explore `kubeconfig` in detail and how it helps in managing Kubernetes access efficiently.

