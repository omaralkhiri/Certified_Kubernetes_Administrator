# Kubernetes Customization with Kustomize

## Overview

In modern software development, deploying applications across multiple environments (such as development, staging, and production) is a common requirement. Often, these environments need slight variations in configuration, such as scaling, resource limits, or replica counts. Managing these differences manually can lead to inefficiencies and errors, especially as the number of environments or resources grows.

This document explores how to solve this issue using **Kustomize**, a tool designed to manage Kubernetes configurations by providing a way to customize them on a per-environment basis without repeating or duplicating YAML files.

## Problem Statement

Consider a scenario where you have an **nginx deployment YAML file** that you want to deploy across multiple environments. Each environment has different resource requirements, such as the number of replicas in each environment:

- **Development environment**: One replica (since it runs on a local machine, which has limited resources).
- **Staging environment**: Two or three replicas.
- **Production environment**: Five to ten replicas to handle significant traffic.

To achieve this, you might consider creating separate directories for each environment, with each directory containing modified versions of the deployment YAML file. This can work, but it comes with some problems:

- **Duplication of Configurations**: You have to maintain multiple copies of the same YAML files across different directories.
- **Error-Prone**: As your Kubernetes resources grow, you need to ensure that changes are applied across all directories, which is tedious and error-prone. If you forget to modify a file in one environment, configurations can diverge, leading to issues.
- **Scalability Problems**: As the number of environments increases, it becomes harder to maintain these separate configurations, especially when introducing new resources like services, secrets, or ConfigMaps.

Thus, creating multiple copies of configurations in each environment is not an optimal or scalable solution.

## Solution: Kustomize

### What is Kustomize?

**Kustomize** is a tool built into `kubectl` (Kubernetes command-line tool) that helps manage Kubernetes configurations by allowing you to reuse and customize YAML files. It solves the problem of maintaining separate configurations for each environment by separating the configuration into two parts:

1. **Base Configuration**: This is the common configuration that applies to all environments.
2. **Overlays**: These are environment-specific modifications that change the base configuration for specific environments, such as development, staging, or production.

With Kustomize, you can manage your environment-specific customizations in a way that avoids duplication and maintains a single source of truth for your base configuration.

### Key Concepts in Kustomize

#### 1. **Base Configuration**  
The **base** represents the common configuration shared across all environments. It includes the standard Kubernetes resources that are identical in all environments. For example, your `nginx` deployment YAML file might contain the definition of the deployment, the service, and other common resources that don't change across environments.

For instance, in the base configuration, you might set the default number of replicas to `1`:

```yaml
# base/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1  # Default replica count
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
```

#### 2. **Overlays**  
An **overlay** is a customization for a specific environment, which overwrites or modifies values in the base configuration. Overlays are usually placed in separate directories for each environment (e.g., `dev`, `staging`, `prod`). These directories contain the environment-specific changes, like changing the replica count or adding environment-specific resources.

For example, in your **staging** environment, you might create an overlay that changes the replica count to `2`:

```yaml
# overlays/staging/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 2  # Override default replica count for staging
```

In the **production** environment, you might create a similar overlay with a higher replica count:

```yaml
# overlays/production/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 5  # Override default replica count for production
```

### Folder Structure with Kustomize

The typical folder structure when using Kustomize looks like this:

```
.
├── base/
│   ├── deployment.yaml
│   └── service.yaml
└── overlays/
    ├── dev/
    │   ├── kustomization.yaml
    │   └── deployment.yaml
    ├── staging/
    │   ├── kustomization.yaml
    │   └── deployment.yaml
    └── production/
        ├── kustomization.yaml
        └── deployment.yaml
```

- **base/**: Contains the common Kubernetes resources, such as deployments, services, etc.
- **overlays/**: Contains subdirectories for each environment (e.g., `dev`, `staging`, `production`). Each environment directory contains its own customizations or overlays, including the specific modifications to values like replicas.

### How to Use Kustomize

1. **Define Base Configurations**: In the `base/` directory, you will define all your common Kubernetes resources, such as deployments, services, and other configurations that are shared across all environments.
   
2. **Create Environment-Specific Overlays**: In the `overlays/` directory, define the customizations for each environment. Each environment has its own directory containing modifications to the base configuration.

3. **Apply Configuration**: To apply the customized configuration for a specific environment, use the following `kubectl` command:

```bash
kubectl apply -k overlays/<environment>
```

For example, to apply the configuration for the staging environment, you would use:

```bash
kubectl apply -k overlays/staging/
```

This will apply the base configuration with the modifications specified in the `staging` overlay.

### Benefits of Using Kustomize

1. **No Duplication**: Kustomize eliminates the need to duplicate YAML files across different environments. You define a base configuration, and only the parts that need to change (like replica count) are specified in the overlays.
   
2. **Simpler Management**: As your application grows and more resources are added, Kustomize makes it easier to manage changes. You only need to update the base configuration, and environment-specific customizations can be easily managed with overlays.
   
3. **No Templating Language**: Unlike other tools like Helm, Kustomize does not require you to learn a templating language. Everything is just plain YAML, making it simple and easy to understand and manage.
   
4. **Built-in with `kubectl`**: Kustomize is integrated into `kubectl`, so you don't need to install additional tools to get started.

### Conclusion

Kustomize is a powerful tool for managing Kubernetes configurations across multiple environments. It helps avoid the pitfalls of duplicating configurations and makes it easy to apply environment-specific customizations without complex templating or duplication of YAML files. By using Kustomize, you can maintain a scalable and efficient workflow for deploying Kubernetes resources in different environments.