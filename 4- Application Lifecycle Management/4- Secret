### Documentation: Working with Kubernetes Secrets  

#### Overview  
Secrets in Kubernetes are used to store sensitive data such as passwords, API keys, or tokens. Unlike ConfigMaps, which store configuration data in plain text, Secrets are encoded in Base64 format. However, itâ€™s important to note that Secrets are not encrypted by default. This document covers the process of creating, viewing, injecting, and securing Secrets in Kubernetes.  

---

### Creating Secrets  

#### Imperative Method  
Secrets can be created directly from the command line using the `kubectl create secret` command:  

1. **Inline Key-Value Pair**: Use the `--from-literal` option to specify the key-value pairs.  
   ```bash
   kubectl create secret generic app-secret --from-literal=DB_HOST=mysql --from-literal=DB_PASSWORD=MySecretPass
   ```  

2. **From a File**: Use the `--from-file` option to read data from a file.  
   ```bash
   kubectl create secret generic app-secret --from-file=./credentials.txt
   ```  

---

#### Declarative Method  
1. Create a YAML file for the Secret:  
   ```yaml
   apiVersion: v1
   kind: Secret
   metadata:
     name: app-secret
   data:
     DB_HOST: bXlzcWw=   # Encoded value for 'mysql'
     DB_PASSWORD: TXlTZWNyZXRQYXNz   # Encoded value for 'MySecretPass'
   ```  

**Note**: Data must be encoded in Base64 format. To encode a value, use the following command:  
   ```bash
   echo -n 'mysql' | base64
   ```  

2. Apply the file to create the Secret:  
   ```bash
   kubectl apply -f secret.yaml
   ```  

---

### Viewing Secrets  

1. **List Secrets**:  
   ```bash
   kubectl get secrets
   ```  

2. **Describe a Secret** (hides values):  
   ```bash
   kubectl describe secret app-secret
   ```  

3. **View Encoded Values in YAML**:  
   ```bash
   kubectl get secret app-secret -o yaml
   ```  

4. **Decode Secret Values**:  
   Use Base64 decoding to view the original values:  
   ```bash
   echo 'bXlzcWw=' | base64 --decode
   ```  

---
**Pod** 
apiVersion: v1 
kind: Pod 
metadata:
  labels:
    name: webapp-pod
  name: webapp-pod
  namespace: default 
spec:
  containers:
  - image: kodekloud/simple-webapp-mysql
    imagePullPolicy: Always
    name: webapp
    envFrom:
    - secretRef:
        name: db-secret
---
### Injecting Secrets into Pods  

#### As Environment Variables  
To use Secrets as environment variables, modify the pod definition:  
```yaml
envFrom:
- secretRef:
    name: app-secret
```  

#### As Files in Volumes  
To mount a Secret as a volume:  
```yaml
volumes:
- name: secret-volume
  secret:
    secretName: app-secret
containers:
- name: app-container
  image: my-app-image
  volumeMounts:
  - name: secret-volume
    mountPath: "/etc/secrets"
```  
Each key in the Secret becomes a file, and its value is the file content.  

---

### Security Considerations  

1. **Secrets Are Encoded, Not Encrypted**:  
   Base64 encoding is not encryption. To secure Secrets:  
   - **Avoid committing Secret YAML files** to version control systems like GitHub.  
   - **Enable Encryption at Rest**: Configure Kubernetes to encrypt Secret data stored in `etcd` using an encryption configuration file passed to the `kube-apiserver`.  

2. **Restrict Access with RBAC**:  
   Limit permissions for users or service accounts to create or access pods in the same namespace as Secrets.  

3. **Consider External Secret Providers**:  
   Use third-party solutions like AWS Secrets Manager, Azure Key Vault, Google Secret Manager, or HashiCorp Vault for enhanced security.  

---

### Summary  
Secrets in Kubernetes help manage sensitive data securely, but precautions are necessary to prevent unauthorized access. Practice creating and managing Secrets in labs, and explore advanced topics like encryption and external providers in specialized courses.  